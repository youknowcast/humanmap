<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>ÂÅâ‰∫∫„Éû„ÉÉ„Éó</title>
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <style>
    .timeline-container {
      position: relative;
      margin: 50px 20px;
      padding: 20px;
    }

    .timeline-scroll {
      overflow-x: auto;
      padding-bottom: 20px;
      margin-left: 20px;
    }

    .timeline-content {
      position: relative;
      min-height: 100%;
      padding-bottom: 50px;
    }

    .timeline-axis {
      position: relative;
      height: 50px;
      border-bottom: 2px solid #333;
      margin-bottom: 30px;
    }

    .century-mark {
      position: absolute;
      bottom: 0;
      transform: translateX(-50%);
      text-align: center;
      font-weight: bold;
      color: #333;
      background-color: rgba(255, 255, 255, 0.8);
      padding: 2px 6px;
      border-radius: 3px;
    }

    .century-line {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 1px;
      background-color: rgba(0, 0, 0, 0.15);
      pointer-events: none;
      z-index: 1;
    }

    .human-line {
      position: relative;
      height: 50px;
      margin: 20px 0;
    }

    .human-bar {
      position: absolute;
      height: 40px;
      background-color: #4CAF50;
      border-radius: 4px;
      display: flex;
      align-items: center;
      padding: 0 10px;
      color: white;
      font-weight: bold;
      white-space: nowrap;
      gap: 8px;
    }

    .info-button {
      background-color: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      font-size: 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      margin-left: 0;
    }

    .info-button:hover {
      background-color: rgba(255, 255, 255, 0.3);
    }

    .tooltip {
      position: absolute;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 10px;
      border-radius: 4px;
      font-size: 14px;
      width: 250px;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-bottom: 10px;
      z-index: 100;
      word-wrap: break-word;
      white-space: normal;
      line-height: 1.4;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .year-marker {
      position: absolute;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      bottom: -4px;
      transform: translateX(-50%);
      z-index: 3;
    }

    .year-line {
      position: absolute;
      width: 1px;
      top: 0;
      bottom: 0;
      pointer-events: none;
      z-index: 2;
    }

    .birth { background-color: #4CAF50; }
    .death { background-color: #f44336; }

    .name-filter {
      position: sticky;
      left: 0;
      margin: 20px;
      background: white;
      padding: 10px;
      z-index: 1;
    }

    input[type="text"] {
      padding: 8px;
      font-size: 16px;
      width: 200px;
    }

    .pin-checkbox {
      position: absolute;
      right: 10px;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      gap: 4px;
      opacity: 0;
      transition: opacity 0.2s;
    }

    .human-bar:hover .pin-checkbox {
      opacity: 1;
    }

    .pin-checkbox input[type="checkbox"] {
      display: none;
    }

    .pin-checkbox label {
      display: flex;
      align-items: center;
      gap: 4px;
      cursor: pointer;
      color: rgba(255, 255, 255, 0.8);
      font-size: 12px;
    }

    .pin-checkbox label::before {
      content: 'üìå';
      font-size: 14px;
      opacity: 0.6;
    }

    .human-bar.pinned .pin-checkbox label::before {
      opacity: 1;
    }

    .human-bar.pinned {
      outline: 2px solid #4CAF50;
    }

    .year-label {
      position: absolute;
      top: 42px;
      transform: translateX(-50%);
      font-size: 12px;
      color: #666;
      background-color: rgba(255, 255, 255, 0.8);
      padding: 0 4px;
      border-radius: 2px;
      z-index: 1;
    }

    .year-labels {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
    }
  </style>
</head>
<body>
  <div id="app">
    <h1>ÂÅâ‰∫∫„Éû„ÉÉ„Éó</h1>
    
    <div class="name-filter">
      <input type="text" v-model="nameFilter" placeholder="ÂêçÂâç„Åß„Éï„Ç£„É´„Çø„Éº">
    </div>

    <div class="timeline-container">
      <div class="timeline-scroll">
        <div class="timeline-content" :style="contentStyle">
          <div v-for="year in timelineData.years" 
               :key="year"
               class="century-line"
               :style="{ left: yearToPosition(year) + 'px' }">
          </div>

          <div class="year-line birth" v-show="hoveredHuman" :style="{ left: yearToPosition(hoveredHuman?.birth) + 'px' }"></div>
          <div class="year-line death" v-show="hoveredHuman" :style="{ left: yearToPosition(hoveredHuman?.death) + 'px' }"></div>

          <div class="timeline-axis">
            <div v-for="year in timelineData.years" 
                 :key="year"
                 class="century-mark"
                 :style="{ left: yearToPosition(year) + 'px' }">
              {{ year }}
            </div>
            <div class="year-marker birth" v-show="hoveredHuman" :style="{ left: yearToPosition(hoveredHuman?.birth) + 'px' }"></div>
            <div class="year-marker death" v-show="hoveredHuman" :style="{ left: yearToPosition(hoveredHuman?.death) + 'px' }"></div>
          </div>

          <div v-for="human in filteredHumans" 
               :key="human.name"
               class="human-line">
            <div class="year-labels">
              <span class="year-label" :style="{ left: yearToPosition(human.birth) + 'px' }">
                {{ human.birth }}
              </span>
              <span class="year-label" :style="{ left: yearToPosition(human.death) + 'px' }">
                {{ human.death }}
              </span>
            </div>
            <div class="human-bar"
                 :class="{ pinned: pinnedHumans.includes(human.name) }"
                 :style="barStyle(human)"
                 @mouseenter="hoveredHuman = human"
                 @mouseleave="hoveredHuman = null">
              <span>{{ human.name }}</span>
              <button v-if="human.note" 
                      class="info-button" 
                      title="Ë©≥Á¥∞ÊÉÖÂ†±"
                      @click.prevent.stop="activeTooltip = activeTooltip?.name === human.name ? null : human.name">
                ‚ìò
              </button>
              <div class="pin-checkbox">
                <input type="checkbox" 
                       :id="'pin-' + human.name"
                       :checked="pinnedHumans.includes(human.name)"
                       @change="togglePin(human.name)">
                <label :for="'pin-' + human.name">
                  Âõ∫ÂÆö
                </label>
              </div>
              <div v-if="human.note" 
                   class="tooltip"
                   :style="{ display: activeTooltip === human.name ? 'block' : 'none' }">
                {{ human.note }}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const timelineData = <%= timeline_data.to_json %>;

    const { createApp, ref, computed, onMounted, onUnmounted } = Vue;

    createApp({
      setup() {
        const nameFilter = ref('');
        const hoveredHuman = ref(null);
        const activeTooltip = ref(null);
        const pinnedHumans = ref([]);

        const filteredHumans = computed(() => {
          const filter = nameFilter.value.toLowerCase();
          return timelineData.humans.filter(human => 
            pinnedHumans.value.includes(human.name) || 
            human.name.toLowerCase().includes(filter)
          );
        });

        const contentStyle = computed(() => {
          const width = ((timelineData.config.endYear - timelineData.config.startYear) * 
                        timelineData.config.pxPerCentury / timelineData.config.centuryStep);
          return {
            width: width + 'px',
            backgroundImage: `linear-gradient(to right, rgba(0, 0, 0, 0.03) 1px, transparent 1px)`,
            backgroundSize: `${timelineData.config.pxPerCentury / 4}px 100%`
          };
        });

        function yearToPosition(year) {
          if (!year) return 0;
          const yearValue = String(year).replace('?', '');
          return ((parseInt(yearValue) - timelineData.config.startYear) * 
                 timelineData.config.pxPerCentury / timelineData.config.centuryStep);
        }

        function barStyle(human) {
          const left = yearToPosition(human.birth);
          const width = yearToPosition(human.death) - left - 20; // „Éë„Éá„Ç£„É≥„Ç∞„ÇíËÄÉÊÖÆ
          return {
            left: left + 'px',
            width: width + 'px'
          };
        }

        // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÇíÂçòÁ¥îÂåñ
        const handleClickOutside = (e) => {
          if (!e.target.closest('.info-button') && !e.target.closest('.tooltip')) {
            activeTooltip.value = null;
          }
        };

        onMounted(() => {
          document.addEventListener('click', handleClickOutside);
        });

        onUnmounted(() => {
          document.removeEventListener('click', handleClickOutside);
        });

        // ÂàùÊúü„Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆ„ÇíË®≠ÂÆö
        setTimeout(() => {
          const scroll = document.querySelector('.timeline-scroll');
          const scrollTo = yearToPosition(1800) - 500;
          scroll.scrollLeft = scrollTo;
        }, 0);

        // Âõ∫ÂÆö„ÅÆ„Éà„Ç∞„É´Èñ¢Êï∞
        function togglePin(name) {
          const index = pinnedHumans.value.indexOf(name);
          if (index === -1) {
            pinnedHumans.value.push(name);
          } else {
            pinnedHumans.value.splice(index, 1);
          }
        }

        return {
          timelineData,
          nameFilter,
          hoveredHuman,
          activeTooltip,
          filteredHumans,
          contentStyle,
          yearToPosition,
          barStyle,
          pinnedHumans,
          togglePin
        };
      }
    }).mount('#app');
  </script>
</body>
</html> 